/**************************************************
 *   Name : Chu Jaan Horng
 *   Title: Serial Interface Peripheral
 *   File : DMA.c
 *
 **************************************************/

#include "DMA.h"
#include "RCC.h"
#include "SPI.h"
#include <stdint.h>

/****
 *  @brief transferDirection() is used to determine the transfer direction of DMA.
 *         returnDirection1 & returnDirection2 - to read back the value in the reigster.
 *  @arg   direction
 ****/
void transferDirection(int direction){
	uint32_t returnDirection1, returnDirection2;
	dataTransferDirection TransDirec;

	TransDirec = direction;
	switch(TransDirec){
	case PERIPHERAL_TO_MEMORY:
		DMA2->S0.CR &= ~(3 << 6);
		break;
	case MEMORY_TO_PERIPHERAL:
		DMA2->S1.CR &= ~(3 << 6);
		DMA2->S1.CR |= (1 << 6);
		break;
	case MEMORY_TO_MEMORY:
		break;
	default: break;
	}

	returnDirection1 = DMA2->S1.CR;
	returnDirection2 = DMA2->S0.CR;
}

/****
 *  @brief configDMA2Transmit() is the configuration function for DMA transmission.
 *         argument source is used to assign the DMA source or destination.
 *         returnDMATransmit, returnPeriAddr1 & returnMemAddr1  - to read back the value in the reigster.
 *         returnFlagIE1  - to read back the value in the reigster.
 *  @arg   source
 ****/
void configDMA2Transmit(uint32_t source){
	uint32_t returnDMATransmit, returnPeriAddr1, returnMemAddr1, returnFlagIE1;

	DMA2->S1.CR &= ~1; //Disable DMA

	DMA2->S1.CR &= ~(7 << 25);	 	// Clear bits Channel selection
	DMA2->S1.CR |= (ch4 << 25);		// Set Channel selection to channel 4
	returnDMATransmit = DMA2->S1.CR;

	DMA2->S1.CR &= ~(1 << 19);		// Clear CT to target memory 0
	DMA2->S1.CR &= ~(1 << 18);		// Clear double buffer mode
	returnDMATransmit = DMA2->S1.CR;

	DMA2->S1.CR &= ~(3 << 16);		// Clear priority
	DMA2->S1.CR |= PRIORITY_HIGH;	// Set priority to high
	returnDMATransmit = DMA2->S1.CR;

	DMA2->S1.CR &= ~(3 << 13);					// Clear memory data size
	returnDMATransmit = DMA2->S1.CR;

	DMA2->S1.CR &= ~(3 << 11);					// Clear peripheral data size
	returnDMATransmit = DMA2->S1.CR;
  
	transferDirection(MEMORY_PERIPHERAL);
	returnDMATransmit = DMA2->S1.CR;

	DMA2->S1.CR &= ~MEMORY_INCREMENT;			// Clear memory increment
	DMA2->S1.CR |= MEMORY_INCREMENT;

	DMA2->S1.CR &= ~PERIPHERAL_INCEREMENT;		// Clear peripheral increment
	returnDMATransmit = DMA2->S1.CR;

	DMA2->S1.CR &= DMA_FLOW_CONTROL;				// Clear flow controller
	returnDMATransmit = DMA2->S1.CR;

	DMA2->S1.CR &= CLEAR_ALL_INTERRUPT;
	DMA2->S1.CR |= ENABLE_ALL_INTERRUPT;		// Enable all interrupt except DMEIE
	returnDMATransmit = DMA2->S1.CR;

	DMA2->S1.NDTR = 1;  // Data size 

	DMA2->S1.M0AR = (uint32_t)source;				 // Source
	DMA2->S1.PAR  = (uint32_t)(&(SPI_reg->SPI_DR));  // Destination

	DMA2->S1.FCR  &= ~FIFO_DISABLE;

	returnDMATransmit = DMA2->S1.CR;
	returnPeriAddr1 = DMA2->S1.PAR;
	returnMemAddr1 = DMA2->S1.M0AR;
	returnFlagIE1 = DMA2->LISR;
}

/****
 *  @brief configDMA2Receive() is the configuration function for DMA reception.
 *         argument source is used to assign the DMA source or destination.
 *         returnDMAReceive, returnPeriAddr2 & returnMemAddr2  - to read back the value in the reigster.
 *         returnFlagIE2  - to read back the value in the reigster.
 *  @arg   source
 ****/
void configDMA2Receive(uint32_t source){
	uint32_t returnDMAReceive, returnPeriAddr2, returnMemAddr2, returnFlagIE2;

	DMA2->S0.CR &= ~1; //Disable DMA

	DMA2->S0.CR &= ~(7 << 25);	 	// Clear bits Channel selection
	DMA2->S0.CR |= (ch4 << 25);		// Set Channel selection to channel 4
	returnDMAReceive = DMA2->S0.CR;

	DMA2->S0.CR &= ~(1 << 19);		// Clear CT to target memory 0
	DMA2->S0.CR &= ~(1 << 18);		// Clear double buffer mode
	returnDMAReceive = DMA2->S0.CR;

	DMA2->S0.CR &= ~(3 << 16);		// Clear priority
	DMA2->S0.CR |= PRIORITY_HIGH;	// Set priority to high
	returnDMAReceive = DMA2->S0.CR;

	DMA2->S0.CR &= ~(3 << 13);					// Clear memory data size
	returnDMAReceive = DMA2->S0.CR;

	DMA2->S0.CR &= ~(3 << 11);					// Clear peripheral data size
	returnDMAReceive = DMA2->S0.CR;

	transferDirection(PERIPHERAL_MEMORY);
	returnDMAReceive = DMA2->S0.CR;

	DMA2->S0.CR &= ~MEMORY_INCREMENT;			// Clear memory increment
	DMA2->S0.CR |= MEMORY_INCREMENT;

	DMA2->S0.CR &= ~PERIPHERAL_INCEREMENT;		// Clear peripheral increment
	returnDMAReceive = DMA2->S0.CR;

	DMA2->S0.CR &= DMA_FLOW_CONTROL;				// Clear flow controller
	returnDMAReceive = DMA2->S0.CR;

	DMA2->S0.CR &= CLEAR_ALL_INTERRUPT;
	DMA2->S0.CR |= ENABLE_ALL_INTERRUPT;		// Enable all interrupt except DMEIE
	returnDMAReceive = DMA2->S0.CR;

	DMA2->S0.NDTR = 1;  // data size

	DMA2->S0.PAR  = (uint32_t)(&(SPI_reg->SPI_DR));  // Source
	DMA2->S0.M0AR = (uint32_t)source;				 // Destination

	DMA2->S0.FCR  &= ~FIFO_DISABLE;

	returnDMAReceive = DMA2->S0.CR;
	returnMemAddr2 = DMA2->S0.PAR;
	returnPeriAddr2 = DMA2->S0.M0AR;
	returnFlagIE2 = DMA2->LISR;
}

/****
 *  @brief  To enable DMA2 for transmision.
 *          returnDMA2  - to read back the value in the reigster.
 ****/
void enableDMA2Transmit(){
	uint32_t returnDMA2;
	DMA2->S1.CR |= 1;

	returnDMA2 = DMA2->S1.CR;
}

/****
 *  @brief  To enable DMA2 for reception.
 *          returnDMA2  - to read back the value in the reigster.
 ****/
void enableDMA2Receive(){
	uint32_t returnDMA2;
	DMA2->S0.CR |= 1;

	returnDMA2 = DMA2->S0.CR;
}

/****
 *  @brief  To get the status flag DMA2.
 *  @arg    posBit
 *  @retval the wanted bit in LISR.
 ****/
int getDMA2Status(int posBit){
  uint32_t checkSR = DMA2->LISR;
  return ((DMA2->LISR  >> posBit) & 1 );
}

/****
 *  @brief  To clear the status flag by setting the bits clear register.
 *          returnFLag  - to read back the value in the reigster.
 ****/
void clearFlag(){
	uint32_t returnFLag;
	DMA2->LIFCR |= (15 << 8);
	DMA2->LIFCR |= (1 << 6);

	returnFLag = DMA2->LISR;
}
/************************************************** 
 *   Name : Chu Jaan Horng
 *   Title: Serial Interface Peripheral
 *   File : GPIO.c
 *
 **************************************************/

#include "GPIO.h"
#include "RCC.h"

/****
 * @brief To configure the GPIO pins.
 *        The clock activation is included in this function.
 *        This is to ensure the clock is activated whenever this function is called.
 * @arg   mode, pinNum, *port
 ****/
void configurePin(int mode, int pinNum, GPIO *port){

	gpioUnresetEnableClock(port);

	port->MODER &= ~(3 << (pinNum * 2));
	port->MODER |= (mode << (pinNum * 2));
	port->OSPEED &= ~(3 << (pinNum * 2));
	port->OSPEED |= (GPIO_HIGH_SPEED << (pinNum * 2));
}

/****
 * @brief To configure the GPIO pins.
 *        This function is used whenever alternate function mode is used.
 *        altFunctionLow() is used for pin number =< 7.
 *        returnAFL - to read back the value in the reigster.
 * @arg   pinNum, *port, AF
 ****/
void altFunctionLow(int pinNum, GPIO *port, int AF){
	uint32_t returnAFL;
	port->AFRL &= ~(16 << (pinNum * 4));
	port->AFRL |= AF << (pinNum * 4);
	returnAFL = port->AFRL;
}

/****
 * @brief To configure the GPIO pins.
 *        This function is used whenever alternate function mode is used.
 *        altFunctionHigh() is used for pin number > 7.
 *        returnAFL - to read back the value in the reigster.
 * @arg   pinNum, *port, AF
 ****/
void altFunctionHigh(int pinNum, GPIO *port, int AF){
	uint32_t returnAFH;
	port->AFRH &= ~(16 << ((pinNum - 8) * 4));
	port->AFRH |= (AF << ((pinNum - 8) * 4));
	returnAFH = port->AFRH;
}
/************************************************** 
 *   Name : Chu Jaan Horng
 *   Title: Serial Interface Peripheral
 *   File : RCC.c
 *
 **************************************************/

#include "GPIO.h"
#include "RCC.h"

/****
 * @brief Unreset the clock and enable the clock of GPIO.
 *        This is the function to assert the peripheral clock.
 *        returnGPIOReset & returnGPIOClock - to read back the value in the reigster.
 * @arg   port
 ****/
void gpioUnresetEnableClock(GPIO* port){
	uint32_t returnGPIOReset, returnGPIOClock;

	int valShift = ((int)port - (0x40020000))/(0x400);
	Rcc_reg->RCC_AHB1RSTR &= ~(1 << (valShift));
	Rcc_reg->RCC_AHB1ENR |= (0x00100000 | (1 << (valShift)));

	returnGPIOReset = Rcc_reg->RCC_AHB1RSTR;
	returnGPIOClock = Rcc_reg->RCC_AHB1ENR;
}

/****
 * @brief Unreset the clock and enable the clock of SPI4.
 *        This is the function to assert the peripheral clock.
 *        returnReset4 & returnClk4 - to read back the value in the reigster.
 ****/
void spi4UnresetEnableClock(){
	uint32_t returnReset4, returnClk4;
	Rcc_reg->RCC_APB2RSTR &= ~(1 << 13);
	Rcc_reg->RCC_APB2ENR |= (1 << 13);

	returnReset4 = Rcc_reg->RCC_APB2RSTR;
	returnClk4 = Rcc_reg->RCC_APB2ENR;
}

/****
 * @brief Unreset the clock and enable the clock of DMA2.
 *        This is the function to assert the peripheral clock.
 *        returnDMAReset & returnDMAClock - to read back the value in the reigster.
 * @arg   dma
 ****/
void dmaUnresetEnableClock(int dma){
	uint32_t returnDMAReset, returnDMAClock;
	if (dma){
		Rcc_reg->RCC_AHB1RSTR &= ~(1 << 22);
		Rcc_reg->RCC_AHB1ENR |= (1 << 22);
	}
	else{
		Rcc_reg->RCC_AHB1RSTR &= ~(1 << 21);
		Rcc_reg->RCC_AHB1ENR |= (1 << 21);
	}

	returnDMAReset = Rcc_reg->RCC_AHB1RSTR;
	returnDMAClock = Rcc_reg->RCC_AHB1ENR;
}

/* 
 *   Name : Chu Jaan Horng
 *   Title: Serial Interface Peripheral
 *   File : SPI.c
 *
*/

#include "SPI.h"
#include "RCC.h"

void sendData(int Data){
	while(!readyTransmit);
	SPI_reg->SPI_DR = Data;
}

uint8_t receivedData(void){
   uint32_t checkSR = SPI_reg->SPI_SR;
   while(!readyReceived);
   uint32_t checkDR = SPI_reg->SPI_DR;
   return SPI_reg->SPI_DR;
}

uint32_t readCRC(int path){
	uint16_t checkCRC;
	uint32_t checkSR = SPI_reg->SPI_SR;
	while(isBusy);
	if (path){
		checkCRC = SPI_reg->SPI_TXCRCR;
	}
	else {
		checkCRC = SPI_reg->SPI_RXCRCR;
	}

	return checkCRC;
}

int getSPI4Status(int posBit){
  uint32_t checkSR = SPI_reg->SPI_SR;
  return ((SPI_reg->SPI_SR  >> posBit) & 1 );
}

void enableSPI(int SPE){
	uint32_t returnEnSPI;
	SPI_reg->SPI_CR1 &= ~(1 << 6);
	SPI_reg->SPI_CR1 |= SPE << 6;

	returnEnSPI = SPI_reg->SPI_CR1;
}

void disableSPI(int SPE){
	uint32_t returnDisSPI, statusReg;
	statusReg = SPI_reg->SPI_SR;
	while( !(((SPI_reg->SPI_SR) >> FLAG_TXE) & 1) );
	while( (((SPI_reg->SPI_SR) >> FLAG_BSY) & 1) );
	SPI_reg->SPI_CR1 &= ~(1 << 6);
	SPI_reg->SPI_CR1 |= SPE << 6;

	returnDisSPI = SPI_reg->SPI_CR1;
}

void configureDirection(int direction){
	uint32_t returnDirection;
	SPI_reg->SPI_CR1 &= ~(1 << 15);
	SPI_reg->SPI_CR1 |= (direction << 15);

	returnDirection = SPI_reg->SPI_CR1;
}

void configureOutput(int TX_RX){
	uint32_t returnOutput;
	SPI_reg->SPI_CR1 &= ~(1 << 14);
	SPI_reg->SPI_CR1 |= (TX_RX << 14);

	returnOutput = SPI_reg->SPI_CR1;
}

void configureReceive(int RX_ONLY){
	uint32_t returnReceive;
	SPI_reg->SPI_CR1 &= ~(1 << 10);
	SPI_reg->SPI_CR1 |= (RX_ONLY << 10);

	returnReceive = SPI_reg->SPI_CR1;
}

void configureMode(int mode){
	uint32_t returnMode;
	SPI_reg->SPI_CR1 &= ~(1 << 2);
	SPI_reg->SPI_CR1 |= (mode << 2);

	returnMode = SPI_reg->SPI_CR1;
}

void configureDataFrame(int DFF){
	uint32_t returnDFF;
	SPI_reg->SPI_CR1 &= ~(1 << 11);
	SPI_reg->SPI_CR1 |= (DFF << 11);

	returnDFF = SPI_reg->SPI_CR1;
}

void configureFrameFormat(int FF){
	uint32_t returnFF;
	SPI_reg->SPI_CR2 &= ~(1 << 4);
	SPI_reg->SPI_CR2 |= (FF << 4);

	returnFF = SPI_reg->SPI_CR2;
}

void configureLSBFIRST(int MSB_LSB){
	uint32_t returnLSBFIRST;
	SPI_reg->SPI_CR1 &= ~(1 << 7);
	SPI_reg->SPI_CR1 |= (MSB_LSB << 7);

	returnLSBFIRST = SPI_reg->SPI_CR1;
}

void configureClock(int clkSelect){
	uint32_t returnClock;
	switch (clkSelect){
	case Clock1:
		SPI_reg->SPI_CR1 &= ~(1 << 1);
		SPI_reg->SPI_CR1 &= ~1;
		break;
	case Clock2:
		SPI_reg->SPI_CR1 &= ~(1 << 1);
		SPI_reg->SPI_CR1 |= 1;
		break;
	case Clock3:
		SPI_reg->SPI_CR1 |= (1 << 1);
		SPI_reg->SPI_CR1 &= ~1;
		break;
	case Clock4:
		SPI_reg->SPI_CR1 |= (1 << 1);
		SPI_reg->SPI_CR1 |= 1;
		break;
	default:
		SPI_reg->SPI_CR1 &= ~(1 << 1);
		SPI_reg->SPI_CR1 &= ~1;
	}

	returnClock = SPI_reg->SPI_CR1;
}

void enableCRC(int en_CRC){
	uint32_t returnCRC;
	SPI_reg->SPI_CR1 &= ~(1 << 13);
	SPI_reg->SPI_CR1 |= (en_CRC << 13);

	returnCRC = SPI_reg->SPI_CR1;
}

void configureCRCNext(int phase){
	uint32_t returnPhase;
	SPI_reg->SPI_CR1 &= ~(1 << 12);
	SPI_reg->SPI_CR1 |= (phase << 12);

	returnPhase = SPI_reg->SPI_CR1;
}

void enableSSM(int en_SSM){
	uint32_t returnSSM;
	SPI_reg->SPI_CR1 &= ~(1 << 9);
	SPI_reg->SPI_CR1 |= (en_SSM << 9);

	returnSSM = SPI_reg->SPI_CR1;
}

void configureBR(int baudRate){
	uint32_t returnBR;
	SPI_reg->SPI_CR1 &= ~(7 << 3);
	SPI_reg->SPI_CR1 |= (baudRate << 3);

	returnBR = SPI_reg->SPI_CR1;
}

void configureSS(int SS){
	uint32_t returnSS;
	SPI_reg->SPI_CR2 &= ~(1 << 2);
	SPI_reg->SPI_CR2 |= (SS << 2);

	returnSS = SPI_reg->SPI_CR2;
}

void CRCpolynomial(int polynomial){
	uint32_t returnPolynomial;
	SPI_reg->SPI_CRCPR = polynomial;

	returnPolynomial = SPI_reg->SPI_CRCPR;
}

void interruptSPI(int IE){
	uint32_t returnInterrupt;
	SPI_reg->SPI_CR2 &= ~(3 << 6);
	SPI_reg->SPI_CR2 |= (IE << 6);

	returnInterrupt = SPI_reg->SPI_CR2;
}

void DMArequest(int DMA){
	uint32_t returnDMA;
	SPI_reg->SPI_CR2 &= ~(3);
	SPI_reg->SPI_CR2 |= (DMA);

	returnDMA = SPI_reg->SPI_CR2;
}
/************************************************** 
 *   Name : Chu Jaan Horng
 *   Title: Serial Interface Peripheral
 *   File : Main.c
 **************************************************/

#include "stm32f4xx.h"
#include "SPI.h"
#include "RCC.h"
#include "GPIO.h"
#include "DMA.h"
#include <stdint.h>

uint8_t txBuffer[] = "A";
uint8_t rxBuffer[100];

void delay(uint32_t delayCount){
	while(delayCount != 0){
		delayCount--;
	}
}

/****
 * @brief To check the status flag for half transfer and complete transfer.
 *        This function will keep on polling until the data is completely sent.
 ****/
void DMA2Transfer(){
	int statusSPI, statusDMA;

	statusSPI = SPI_reg->SPI_SR;
	statusDMA = DMA2->LISR;

	while(! (HalfTransfer & CompleteTransfer));
	clearFlag();
	statusDMA = DMA2->LISR;
}

/*****
 * @brief This function is the global interrupt for SPI transmission & reception.
 *        Once interrupt is generated, data will be either write/sent or read/received.
 ****/
void SPI4_IRQHandler(void){
	int status, readData;

	status = SPI_reg->SPI_SR;
	if (readyReceived){
		readData = receivedData();
	}
	else if (readyTransmit){
		sendData(0x69); // 8'b01101001
	}
}


/*****
 * @brief This function is the global interrupt for DMA reception.
 ****/

void DMA2_Stream0_IRQHandler(void){
	int readData;

	readData = rxBuffer[0];
}

/*****
 * @brief This function is the global interrupt for DMA transmission.
 ****/
void DMA2_Stream1_IRQHandler(void){

	DMA2Transfer();
}

	/****
	 *	Port -> PORTE
	 *
	 *	Pin 2 = SPI4_SCK
	 *	Pin 4 = SPI4_NSS
	 *	Pin 5 = SPI4_MISO
	 *	Pin 6 = SPI4_MOSI
	 ****/

void masterMode(){
	configurePin(GPIO_MODE_ALTFUNC, PIN_2, PORTE);
	altFunctionLow(PIN_2, PORTE, AF5);

	configurePin(GPIO_MODE_ALTFUNC, PIN_4, PORTE);
	altFunctionLow(PIN_4, PORTE, AF5);

	configurePin(GPIO_MODE_ALTFUNC, PIN_5, PORTE);
	altFunctionLow(PIN_5, PORTE, AF5);

	configurePin(GPIO_MODE_ALTFUNC, PIN_6, PORTE);
	altFunctionLow(PIN_6, PORTE, AF5);

	spi4UnresetEnableClock();
	dmaUnresetEnableClock(dma2);

	configureFrameFormat(TI_Mode);
	configureMode(Master_Mode);
	configureDirection(UniDirec_2_Line);
	configureOutput(Transmit);
	configureReceive(Full_Duplex);
	enableCRC(CRCenable);
	CRCpolynomial(0x11);
	configureDataFrame(Bit8);
	configureBR(BR4);
	interruptSPI(TXRXIE);
	DMArequest(DMA_TXRX);
	configDMA2Transmit(txBuffer);	// memory to Peripheral
	configDMA2Receive(rxBuffer);    // Peripheral to memory
}


/****
	 *	Port -> PORTE
	 *
	 *	Pin 11 = SPI4_NSS
	 *	Pin 12 = SPI4_SCK
	 *	Pin 13 = SPI4_MISO
	 *	Pin 14 = SPI4_MOSI
	 ****/

void slaveMode(){

	configurePin(GPIO_MODE_ALTFUNC, PIN_11, PORTE);
	altFunctionHigh(PIN_11, PORTE, AF5);

	configurePin(GPIO_MODE_ALTFUNC, PIN_12, PORTE);
	altFunctionHigh(PIN_12, PORTE, AF5);

	configurePin(GPIO_MODE_ALTFUNC, PIN_13, PORTE);
	altFunctionHigh(PIN_13, PORTE, AF5);

	configurePin(GPIO_MODE_ALTFUNC, PIN_14, PORTE);
	altFunctionHigh(PIN_14, PORTE, AF5);

	spi4UnresetEnableClock();
	dmaUnresetEnableClock(dma2);

	configureFrameFormat(TI_Mode);
	configureMode(Slave_Mode);
	configureDirection(UniDirec_2_Line);
	configureOutput(Transmit);
	configureReceive(Full_Duplex);
	enableCRC(CRCenable);
	CRCpolynomial(0x11);
	configureDataFrame(Bit8);
	configureBR(BR4);
	interruptSPI(TXRXIE);
	DMArequest(DMA_RX);
	configDMA2Transmit(txBuffer);	// memory to Peripheral
	configDMA2Receive(rxBuffer);    // Peripheral to memory
}

int main(){
	uint32_t status1, status2, writeData, readData, AF_PIN_2, AF_PIN_6, tx, crc;

	uint32_t fsclk = HAL_RCC_GetClockConfig();
	uint32_t fhclk = HAL_RCC_GetHCLKFreq();
	uint32_t fpclk1 = HAL_RCC_GetPCLK1Freq();
	uint32_t fpclk2 = HAL_RCC_GetPCLK2Freq();

	HAL_NVIC_EnableIRQ(SPI4_IRQn);
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);

	masterMode();
  slaveMode();
	enableDMA2Transmit();
	enableDMA2Receive();
	enableSPI(Enable);

	DMA2Transfer();

	while(1){
		sendData(0x69); // 8'b01101001
		readData = receivedData();
		configureCRCNext(Next_Transfer);
		crc = readCRC(Transmit);
		status1 = SPI_reg->SPI_SR;
	}
}
